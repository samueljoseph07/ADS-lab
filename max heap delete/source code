import java.util.Arrays;

public class MaxHeap {
    private int[] heap;
    private int size;
    private int capacity;

    // Constructor to initialize the heap with a given capacity
    public MaxHeap(int capacity) {
        this.capacity = capacity;
        this.size = 0;
        heap = new int[capacity];
    }

    // Function to insert a new element into the heap
    public void insert(int element) {
        if (size == capacity) {
            System.out.println("Heap is full, cannot insert!");
            return;
        }

        // Insert the new element at the end of the heap
        heap[size] = element;
        int current = size;
        size++;

        // Fix the max heap property by moving the element up as needed
        while (current > 0 && heap[current] > heap[parent(current)]) {
            swap(current, parent(current));
            current = parent(current);
        }
    }

    // Function to delete the root (maximum) element from the heap
    public int deleteMax() {
        if (size == 0) {
            throw new IllegalStateException("Heap is empty, cannot delete!");
        }

        // The root element is the maximum
        int max = heap[0];

        // Move the last element to the root and reduce the size
        heap[0] = heap[size - 1];
        size--;

        // Fix the max heap property by moving the new root down as needed
        heapify(0);

        return max;
    }

    // Function to heapify (restore the heap property) at a given index
    private void heapify(int index) {
        int largest = index;
        int leftChild = left(index);
        int rightChild = right(index);

        // If the left child is larger than the current largest, update largest
        if (leftChild < size && heap[leftChild] > heap[largest]) {
            largest = leftChild;
        }

        // If the right child is larger than the current largest, update largest
        if (rightChild < size && heap[rightChild] > heap[largest]) {
            largest = rightChild;
        }

        // If the largest is not the root, swap and continue heapifying
        if (largest != index) {
            swap(index, largest);
            heapify(largest);
        }
    }

    // Function to get the index of the parent of a node
    private int parent(int pos) {
        return (pos - 1) / 2;
    }

    // Function to get the index of the left child of a node
    private int left(int pos) {
        return 2 * pos + 1;
    }

    // Function to get the index of the right child of a node
    private int right(int pos) {
        return 2 * pos + 2;
    }

    // Function to swap two elements in the heap
    private void swap(int i, int j) {
        int temp = heap[i];
        heap[i] = heap[j];
        heap[j] = temp;
    }

    // Function to print the elements of the heap
    public void printHeap() {
        System.out.println(Arrays.toString(Arrays.copyOf(heap, size)));
    }

    public static void main(String[] args) {
        MaxHeap maxHeap = new MaxHeap(10);

        // Inserting elements into the max heap
        maxHeap.insert(20);
        maxHeap.insert(15);
        maxHeap.insert(30);
        maxHeap.insert(10);
        maxHeap.insert(40);

        // Printing the heap before deletion
        System.out.println("Heap before deletion:");
        maxHeap.printHeap();

        // Deleting the maximum element (root)
        int deleted = maxHeap.deleteMax();
        System.out.println("Deleted element: " + deleted);

        // Printing the heap after deletion
        System.out.println("Heap after deletion:");
        maxHeap.printHeap();
    }
}
