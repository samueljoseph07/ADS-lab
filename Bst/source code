// Binary Search Tree implementation in Java
class BinarySearchTree {

    // Node structure
    class Node {
        int key;
        Node left, right;

        public Node(int data) {
            key = data;
            left = right = null;
        }
    }

    // Root node of the BST
    Node root;

    // Constructor to initialize BST
    BinarySearchTree() {
        root = null;
    }

    // Method to insert a new node with a given key
    void insert(int key) {
        root = insertRec(root, key);
    }

    // Recursive function to insert a new key in BST
    Node insertRec(Node root, int key) {
        // If the tree is empty, return a new node
        if (root == null) {
            root = new Node(key);
            return root;
        }

        // Otherwise, recur down the tree
        if (key < root.key)
            root.left = insertRec(root.left, key);
        else if (key > root.key)
            root.right = insertRec(root.right, key);

        // Return the (unchanged) node pointer
        return root;
    }

    // Method to search for a key in the BST
    boolean search(int key) {
        return searchRec(root, key);
    }

    // Recursive function to search for a key in BST
    boolean searchRec(Node root, int key) {
        // Base cases: root is null or key is present at root
        if (root == null)
            return false;
        if (root.key == key)
            return true;

        // Key is smaller than root's key
        if (key < root.key)
            return searchRec(root.left, key);

        // Key is greater than root's key
        return searchRec(root.right, key);
    }

    // Method to delete a key from the BST
    void deleteKey(int key) {
        root = deleteRec(root, key);
    }

    // Recursive function to delete a key from the BST
    Node deleteRec(Node root, int key) {
        // Base case: If the tree is empty
        if (root == null)
            return root;

        // Recur down the tree
        if (key < root.key)
            root.left = deleteRec(root.left, key);
        else if (key > root.key)
            root.right = deleteRec(root.right, key);

        // If key is the same as root's key, then this is the node to be deleted
        else {
            // Node with only one child or no child
            if (root.left == null)
                return root.right;
            else if (root.right == null)
                return root.left;

            // Node with two children: Get the inorder successor (smallest in the right subtree)
            root.key = minValue(root.right);

            // Delete the inorder successor
            root.right = deleteRec(root.right, root.key);
        }

        return root;
    }

    // Helper function to find the minimum value in the subtree
    int minValue(Node root) {
        int minv = root.key;
        while (root.left != null) {
            minv = root.left.key;
            root = root.left;
        }
        return minv;
    }

    // Method to print the inorder traversal of the BST
    void inorder() {
        inorderRec(root);
    }

    // Recursive function for inorder traversal
    void inorderRec(Node root) {
        if (root != null) {
            inorderRec(root.left);
            System.out.print(root.key + " ");
            inorderRec(root.right);
        }
    }

    public static void main(String[] args) {
        BinarySearchTree bst = new BinarySearchTree();

        // Inserting nodes
        bst.insert(50);
        bst.insert(30);
        bst.insert(20);
        bst.insert(40);
        bst.insert(70);
        bst.insert(60);
        bst.insert(80);

        System.out.println("Inorder traversal:");
        bst.inorder();  // Print in sorted order

        System.out.println("\n\nSearch 40: " + bst.search(40));  // Should return true
        System.out.println("Search 90: " + bst.search(90));  // Should return false

        System.out.println("\nDelete 20");
        bst.deleteKey(20);
        System.out.println("Inorder traversal after deletion:");
        bst.inorder();

        System.out.println("\n\nDelete 30");
        bst.deleteKey(30);
        System.out.println("Inorder traversal after deletion:");
        bst.inorder();

        System.out.println("\n\nDelete 50");
        bst.deleteKey(50);
        System.out.println("Inorder traversal after deletion:");
        bst.inorder();
    }
}